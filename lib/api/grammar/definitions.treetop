grammar Definitions

  rule crc32
    [A-Fa-f0-9] 8..8  {
      def content
        [:crc32, text_value.downcase]
      end
    }
  end

  rule resolution
    (digits [pP] / digits [xX] digits) {
      def content
        case elements.size
        when 2; [:resolution, elements.first.text_value]
        when 3; [:resolution, elements.last.text_value]
        end
      end
    }
  end

  rule extname
    '.' word {
      def content
        [:extension, word.text_value.downcase]
      end
    }
  end

  rule volume
    separator* ([vV] ([oO] [lL])? / [dD] [iI] [sS] [cC]) separator* '.'? separator* digits separator* {
      def content
        [:volume, elements[-2].text_value]
      end
    }
  end

  rule episodes
    separator* (sequence / digits) version? separator* {
      def content
        [:episodes, elements[1..-2].map(&:text_value).join]
      end
    }
  end

  rule version
    [vV] digits
  end

  rule phrase
    (word / separator)*
  end

  rule word
    !separator (unicode / [a-zA-Z0-9\-:!,;\#'~])+
  end

  rule unicode
    [\u0080-\u{10FFFF}]
  end

  rule separator
    ('. ' / ' _' / ' ' / '_')+
  end

  rule serial_separator
    '-' / '#'
  end

  rule round_braces
    '(' / ')'
  end

  rule square_braces
    '[' / ']'
  end

  rule sequence
    digits [-~] digits
  end

  rule digits
    [0-9]+
  end

end